{"version":3,"sources":["index.js"],"names":["GRID_SIDE","WHITE_PAWN_START_Y","BLACK_PAWN_START_Y","WHITE_PROMOTION_ROW","BLACK_PROMOTION_ROW","WHITE_PLAYER","BLACK_PLAYER","BLACK_CELL_CLASS","WHITE_CELL_CLASS","LIT_CELL_CLASS","CELL_CLASS","ROW_CLASS","PIECE_CLASS","PIECE_COLOR_CLASS","CHESS_PIECES_CHARS","LIGHT_PIECES_FC","getBlackPawnMovementCells","getKingMovementCells","getQueenMovementCells","getRookMovementCells","getKnightMovementCells","getBishopMovementCells","getWhitePawnMovementCells","Piece","htmlGrid","document","getElementById","grid","movingCell","currentPlayerTurn","generateGrid","i","push","j","generateHTMLGrid","row","createElement","classList","add","cell","id","addEventListener","onCellClick","appendChild","clearBoardState","x","y","convertCoordsToId","innerHTML","generateDefaultBoardState","initPieceTo","BLACK_ROOK","BLACK_KNIGHT","BLACK_BISHOP","BLACK_QUEEN","BLACK_KING","BLACK_PAWN","WHITE_ROOK","WHITE_KNIGHT","WHITE_BISHOP","WHITE_QUEEN","WHITE_KING","WHITE_PAWN","generateKingTestBoardState","generateKnightTestBoardState","generateRookTestBoardState","generateBishopTestBoardState","generateQueenTestBoardState","generateUncheckedKingTestBoardState","coords","convertIdToCoords","split","map","string","parseInt","isInBounds","getPiecePlayer","pieceType","getPieceColor","getPieceAt","VOID","getAllPlayerPiecesWithCoords","player","result","piece","getAllPlayerReachableCellsCoords","allPlayerPiecesWithCoords","forEach","pair","apply","getCheckPieceMovementCells","createHTMLPiece","Math","abs","setHTMLPieceTo","removeHTMLPieceFrom","removeChild","getHTMLPieceAt","firstChild","HTMLpiece","lightCells","length","lightCell","remove","lightCellsPiece","getPieceMovementCells","movementFcIndex","WHITE_KING_UNCHECKED","getUncheckedKingMovementCells","getOtherPlayer","getCheckPawnMovementCells","unlightAllCells","cellId","changeTurn","event","currentTarget","hasChildNodes","contains","movingPiece","HTMLPiece","tryPromotion","newQueen","playerDirection","NO_PIECE","diagonalCoords","pieceAtDiagonalCoords","rangeKing","repasDuKing","somme","pow","rangeChevalier","repasDuChevalier","obstacle","obstacle1","rangeTour","rangeTourlateral","checkedCells"],"mappings":"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","file":"TP CHESS.e31bb0bc.js","sourceRoot":"..","sourcesContent":["var GRID_SIDE = 8;\r\nvar WHITE_PAWN_START_Y = 6;\r\nvar BLACK_PAWN_START_Y = 1;\r\nvar WHITE_PROMOTION_ROW = 0;\r\nvar BLACK_PROMOTION_ROW = 7;\r\nvar WHITE_PLAYER = 1;\r\nvar BLACK_PLAYER = 2;\r\nvar BLACK_CELL_CLASS = \"blackCell\";\r\nvar WHITE_CELL_CLASS = \"whiteCell\";\r\nvar LIT_CELL_CLASS = \"litCell\";\r\nvar CELL_CLASS = \"cell\";\r\nvar ROW_CLASS = \"row\";\r\nvar PIECE_CLASS = \"piece\";\r\nvar PIECE_COLOR_CLASS = [, \"whitePiece\", \"blackPiece\"];\r\nvar CHESS_PIECES_CHARS = [, \"K\", \"Q\", \"R\", \"N\", \"B\", \"P\"];\r\n// Les fonctions qui seront appelées pour récupérer les cases à allumer\r\nvar LIGHT_PIECES_FC = [\r\n    getBlackPawnMovementCells,\r\n    getKingMovementCells,\r\n    getQueenMovementCells,\r\n    getRookMovementCells,\r\n    getKnightMovementCells,\r\n    getBishopMovementCells,\r\n    getWhitePawnMovementCells\r\n];\r\n// Chaque pièce est un entier relatif\r\n// Les pièces identiques noires et blanches ont la même valeur absolue\r\n// NO_PIECE est 0, l'absence de pièce\r\n// VOID est null, une case qui n'existe pas (OoB)\r\nvar Piece;\r\n(function (Piece) {\r\n    Piece[Piece[\"BLACK_KING_UNCHECKED\"] = -7] = \"BLACK_KING_UNCHECKED\";\r\n    Piece[Piece[\"BLACK_PAWN\"] = -6] = \"BLACK_PAWN\";\r\n    Piece[Piece[\"BLACK_BISHOP\"] = -5] = \"BLACK_BISHOP\";\r\n    Piece[Piece[\"BLACK_KNIGHT\"] = -4] = \"BLACK_KNIGHT\";\r\n    Piece[Piece[\"BLACK_ROOK\"] = -3] = \"BLACK_ROOK\";\r\n    Piece[Piece[\"BLACK_QUEEN\"] = -2] = \"BLACK_QUEEN\";\r\n    Piece[Piece[\"BLACK_KING\"] = -1] = \"BLACK_KING\";\r\n    Piece[Piece[\"NO_PIECE\"] = 0] = \"NO_PIECE\";\r\n    Piece[Piece[\"WHITE_KING\"] = 1] = \"WHITE_KING\";\r\n    Piece[Piece[\"WHITE_QUEEN\"] = 2] = \"WHITE_QUEEN\";\r\n    Piece[Piece[\"WHITE_ROOK\"] = 3] = \"WHITE_ROOK\";\r\n    Piece[Piece[\"WHITE_KNIGHT\"] = 4] = \"WHITE_KNIGHT\";\r\n    Piece[Piece[\"WHITE_BISHOP\"] = 5] = \"WHITE_BISHOP\";\r\n    Piece[Piece[\"WHITE_PAWN\"] = 6] = \"WHITE_PAWN\";\r\n    Piece[Piece[\"WHITE_KING_UNCHECKED\"] = 7] = \"WHITE_KING_UNCHECKED\";\r\n    Piece[Piece[\"VOID\"] = null] = \"VOID\";\r\n})(Piece || (Piece = {}));\r\nvar htmlGrid = document.getElementById(\"grid\");\r\nvar grid = [];\r\nvar movingCell = [];\r\nvar currentPlayerTurn = WHITE_PLAYER;\r\n// Génération de la grille de jeu logique\r\nfunction generateGrid(grid) {\r\n    for (var i = 0; i < GRID_SIDE; i++) {\r\n        grid.push([]);\r\n        for (var j = 0; j < GRID_SIDE; j++) {\r\n            grid[i].push(0);\r\n        }\r\n    }\r\n}\r\n// Génération de la grille de jeu HTML\r\nfunction generateHTMLGrid(htmlGrid) {\r\n    for (var i = 0; i < GRID_SIDE; i++) {\r\n        var row = document.createElement(\"div\");\r\n        row.classList.add(ROW_CLASS);\r\n        for (var j = 0; j < GRID_SIDE; j++) {\r\n            var cell = document.createElement(\"div\");\r\n            if ((i + j) % 2 == 0) {\r\n                cell.classList.add(WHITE_CELL_CLASS);\r\n            }\r\n            else {\r\n                cell.classList.add(BLACK_CELL_CLASS);\r\n            }\r\n            cell.classList.add(CELL_CLASS);\r\n            cell.id = j + \",\" + i;\r\n            cell.addEventListener(\"click\", onCellClick);\r\n            row.appendChild(cell);\r\n        }\r\n        htmlGrid.appendChild(row);\r\n    }\r\n}\r\n// Reset du plateau de jeu logique et HTML à 0\r\nfunction clearBoardState(grid) {\r\n    for (var x = 0; x < GRID_SIDE; x++) {\r\n        for (var y = 0; y < GRID_SIDE; y++) {\r\n            grid[y][x] = 0;\r\n            var cell = document.getElementById(convertCoordsToId([x, y]));\r\n            cell.innerHTML = \"\";\r\n        }\r\n    }\r\n}\r\n// Placement des pièces pour un plateau de départ classique d'une partie d'échecs\r\nfunction generateDefaultBoardState(grid) {\r\n    clearBoardState(grid);\r\n    initPieceTo(Piece.BLACK_ROOK, [0, 0]);\r\n    initPieceTo(Piece.BLACK_ROOK, [7, 0]);\r\n    initPieceTo(Piece.BLACK_KNIGHT, [1, 0]);\r\n    initPieceTo(Piece.BLACK_KNIGHT, [6, 0]);\r\n    initPieceTo(Piece.BLACK_BISHOP, [2, 0]);\r\n    initPieceTo(Piece.BLACK_BISHOP, [5, 0]);\r\n    initPieceTo(Piece.BLACK_QUEEN, [3, 0]);\r\n    initPieceTo(Piece.BLACK_KING, [4, 0]);\r\n    for (var i = 0; i < GRID_SIDE; i++) {\r\n        initPieceTo(Piece.BLACK_PAWN, [i, 1]);\r\n    }\r\n    initPieceTo(Piece.WHITE_ROOK, [0, 7]);\r\n    initPieceTo(Piece.WHITE_ROOK, [7, 7]);\r\n    initPieceTo(Piece.WHITE_KNIGHT, [1, 7]);\r\n    initPieceTo(Piece.WHITE_KNIGHT, [6, 7]);\r\n    initPieceTo(Piece.WHITE_BISHOP, [2, 7]);\r\n    initPieceTo(Piece.WHITE_BISHOP, [5, 7]);\r\n    initPieceTo(Piece.WHITE_QUEEN, [3, 7]);\r\n    initPieceTo(Piece.WHITE_KING, [4, 7]);\r\n    for (var i = 0; i < GRID_SIDE; i++) {\r\n        initPieceTo(Piece.WHITE_PAWN, [i, 6]);\r\n    }\r\n}\r\n// Placement de pièces pour vérifier les mouvements du Roi\r\nfunction generateKingTestBoardState(grid) {\r\n    clearBoardState(grid);\r\n    initPieceTo(Piece.WHITE_KING, [4, 4]);\r\n    initPieceTo(Piece.WHITE_PAWN, [5, 4]);\r\n    initPieceTo(Piece.BLACK_PAWN, [3, 3]);\r\n}\r\n// Placement de pièces pour vérifier les mouvements du Cavalier\r\nfunction generateKnightTestBoardState(grid) {\r\n    clearBoardState(grid);\r\n    initPieceTo(Piece.WHITE_KNIGHT, [4, 4]);\r\n    initPieceTo(Piece.WHITE_PAWN, [6, 3]);\r\n    initPieceTo(Piece.BLACK_PAWN, [3, 6]);\r\n    initPieceTo(Piece.BLACK_PAWN, [4, 5]);\r\n    initPieceTo(Piece.BLACK_PAWN, [3, 5]);\r\n}\r\n// Placement de pièces pour vérifier les mouvements de la Tour\r\nfunction generateRookTestBoardState(grid) {\r\n    clearBoardState(grid);\r\n    initPieceTo(Piece.WHITE_ROOK, [4, 4]);\r\n    initPieceTo(Piece.WHITE_PAWN, [1, 4]);\r\n    initPieceTo(Piece.BLACK_PAWN, [4, 2]);\r\n}\r\n// Placement de pièces pour vérifier les mouvements du Fou\r\nfunction generateBishopTestBoardState(grid) {\r\n    clearBoardState(grid);\r\n    initPieceTo(Piece.WHITE_BISHOP, [4, 4]);\r\n    initPieceTo(Piece.WHITE_PAWN, [2, 2]);\r\n    initPieceTo(Piece.BLACK_PAWN, [5, 3]);\r\n}\r\n// Placement de pièces pour vérifier les mouvements de la Reine\r\nfunction generateQueenTestBoardState(grid) {\r\n    clearBoardState(grid);\r\n    initPieceTo(Piece.WHITE_QUEEN, [4, 4]);\r\n    initPieceTo(Piece.WHITE_PAWN, [2, 2]);\r\n    initPieceTo(Piece.BLACK_PAWN, [5, 3]);\r\n    initPieceTo(Piece.WHITE_PAWN, [1, 4]);\r\n    initPieceTo(Piece.BLACK_PAWN, [4, 2]);\r\n}\r\n// Placement de pièces pour vérifier les mouvements du Roi avec prise en compte de l'échec\r\nfunction generateUncheckedKingTestBoardState(grid) {\r\n    clearBoardState(grid);\r\n    initPieceTo(Piece.WHITE_KING, [4, 4]);\r\n    initPieceTo(Piece.WHITE_PAWN, [5, 4]);\r\n    initPieceTo(Piece.BLACK_ROOK, [3, 1]);\r\n}\r\n// Obtenir un id de case HTML à partir de coordonnées\r\nfunction convertCoordsToId(coords) {\r\n    return coords[0] + \",\" + coords[1];\r\n}\r\n// Obtenir des coordonnées à partir d'un id de case HTML\r\nfunction convertIdToCoords(id) {\r\n    return id.split(',').map(function (string) { return parseInt(string); });\r\n}\r\n// Vérifier si les coordonnées correspondent bien à une case du plateau\r\nfunction isInBounds(coords) {\r\n    return coords[0] >= 0 && coords[0] < GRID_SIDE && coords[1] >= 0 && coords[1] < GRID_SIDE;\r\n}\r\n// À partir d'une pièce logique, récupérer le joueur propriétaire de la pièce\r\nfunction getPiecePlayer(pieceType) {\r\n    if (pieceType > 0) {\r\n        return 1;\r\n    }\r\n    else if (pieceType < 0) {\r\n        return 2;\r\n    }\r\n    return 0;\r\n}\r\n// À partir d'une pièce logique, récupérer la classe css de la couleur de la pièce\r\nfunction getPieceColor(pieceType) {\r\n    return PIECE_COLOR_CLASS[getPiecePlayer(pieceType)];\r\n}\r\n// Récupérer la pièce logique aux coordonnées fournies en paramètre\r\n// Si les coordonnées sont hors plateau, retourne VOID\r\nfunction getPieceAt(coords) {\r\n    if (isInBounds(coords)) {\r\n        return grid[coords[1]][coords[0]];\r\n    }\r\n    else {\r\n        return Piece.VOID;\r\n    }\r\n}\r\n// Récupère toutes les pièces logiques d'un joueur et leurs coordonnées\r\n// Chaque entrée est sous la forme [x, y, pièce]\r\nfunction getAllPlayerPiecesWithCoords(player) {\r\n    var result = [];\r\n    for (var i = 0; i < GRID_SIDE; i++) {\r\n        for (var j = 0; j < GRID_SIDE; j++) {\r\n            var piece = getPieceAt([i, j]);\r\n            if (getPiecePlayer(piece) == player) {\r\n                result.push([i, j, piece]);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// Récupère toutes les cellules atteignables par un joueur\r\n// Cela compte chaque cellule atteignable par chaque pièce du joueur\r\n// Les doublons ne sont pas filtrés\r\nfunction getAllPlayerReachableCellsCoords(player) {\r\n    var result = [];\r\n    var allPlayerPiecesWithCoords = getAllPlayerPiecesWithCoords(player);\r\n    allPlayerPiecesWithCoords.forEach(function (pair) {\r\n        result.push.apply(result, getCheckPieceMovementCells(pair[2], [pair[0], pair[1]]));\r\n    });\r\n    return result;\r\n}\r\n// Crée une pièce HTML à partir d'une pièce logique\r\nfunction createHTMLPiece(pieceType) {\r\n    var piece = document.createElement(\"p\");\r\n    piece.classList.add(getPieceColor(pieceType));\r\n    piece.classList.add(PIECE_CLASS);\r\n    piece.innerHTML = CHESS_PIECES_CHARS[Math.abs(pieceType)];\r\n    return piece;\r\n}\r\n// Place une pièce HTML aux coordonnées fournies\r\nfunction setHTMLPieceTo(piece, coords) {\r\n    var cell = document.getElementById(convertCoordsToId(coords));\r\n    cell.appendChild(piece);\r\n}\r\n// Retire une pièce HTML (si elle existe) aux coordonnées fournies\r\nfunction removeHTMLPieceFrom(piece, coords) {\r\n    if (!piece) {\r\n        return;\r\n    }\r\n    var cell = document.getElementById(convertCoordsToId(coords));\r\n    return cell.removeChild(piece);\r\n}\r\n// Récupère la pièce HTML (si elle existe) aux coordonnées fournies\r\nfunction getHTMLPieceAt(coords) {\r\n    var cell = document.getElementById(convertCoordsToId(coords));\r\n    return cell.firstChild;\r\n}\r\n// Initialise une pièce logique et HTML aux coordonnées fournies\r\nfunction initPieceTo(piece, coords) {\r\n    grid[coords[1]][coords[0]] = piece;\r\n    var HTMLpiece = createHTMLPiece(piece);\r\n    setHTMLPieceTo(HTMLpiece, [coords[0], coords[1]]);\r\n}\r\n// Allume les cellules passées en paramètre\r\nfunction lightCells(coords) {\r\n    for (var i = 0; i < coords.length; i++) {\r\n        if (isInBounds(coords[i])) {\r\n            lightCell(coords[i]);\r\n        }\r\n    }\r\n}\r\n// Allume une cellule passée en paramètre\r\nfunction lightCell(coords) {\r\n    var cell = document.getElementById(convertCoordsToId(coords));\r\n    cell.classList.remove(BLACK_CELL_CLASS);\r\n    cell.classList.remove(WHITE_CELL_CLASS);\r\n    cell.classList.add(LIT_CELL_CLASS);\r\n}\r\n// Allume les cellules atteignables par la pièce logique passée en paramètre aux coordonnées fournies\r\nfunction lightCellsPiece(piece, coords) {\r\n    lightCells(getPieceMovementCells(piece, coords));\r\n}\r\n// Récupère les cellules atteignables par la pièce logique passée en paramètre aux coordonnées fournies\r\nfunction getPieceMovementCells(piece, coords) {\r\n    var movementFcIndex = 0;\r\n    var player = getPiecePlayer(piece);\r\n    if (piece != Piece.BLACK_PAWN) {\r\n        movementFcIndex = Math.abs(piece);\r\n    }\r\n    var result;\r\n    // Cas particulier du déplacement du roi qui ne peut pas se déplacer sur une cellule checked\r\n    if (movementFcIndex == Piece.WHITE_KING_UNCHECKED) {\r\n        result = getUncheckedKingMovementCells(coords, getPiecePlayer(piece), getAllPlayerReachableCellsCoords(getOtherPlayer(player)));\r\n    }\r\n    else {\r\n        result = LIGHT_PIECES_FC[movementFcIndex](coords, getPiecePlayer(piece));\r\n    }\r\n    return result;\r\n}\r\n// Récupère les cellules capturables par la pièce logique (ne sert que pour la simulation d'échec)\r\nfunction getCheckPieceMovementCells(piece, coords) {\r\n    var movementFcIndex = 0;\r\n    var player = getPiecePlayer(piece);\r\n    if (piece != Piece.BLACK_PAWN) {\r\n        movementFcIndex = Math.abs(piece);\r\n    }\r\n    var result;\r\n    if (Math.abs(piece) == Piece.WHITE_PAWN) {\r\n        result = getCheckPawnMovementCells(coords, player);\r\n    }\r\n    else {\r\n        result = getPieceMovementCells(piece, coords);\r\n    }\r\n    return result;\r\n}\r\n// Éteint toutes les cellules du plateau\r\nfunction unlightAllCells() {\r\n    for (var i = 0; i < GRID_SIDE; i++) {\r\n        for (var j = 0; j < GRID_SIDE; j++) {\r\n            var cellId = convertCoordsToId([i, j]);\r\n            var cell = document.getElementById(cellId);\r\n            cell.classList.remove(LIT_CELL_CLASS);\r\n            if ((i + j) % 2 == 0) {\r\n                cell.classList.add(WHITE_CELL_CLASS);\r\n            }\r\n            else {\r\n                cell.classList.add(BLACK_CELL_CLASS);\r\n            }\r\n        }\r\n    }\r\n}\r\n// Change le tour de jeu\r\nfunction changeTurn() {\r\n    if (currentPlayerTurn == WHITE_PLAYER) {\r\n        currentPlayerTurn = BLACK_PLAYER;\r\n    }\r\n    else {\r\n        currentPlayerTurn = WHITE_PLAYER;\r\n    }\r\n}\r\n// Récupère le numéro du joueur dont ce n'est pas le tour de jeu\r\nfunction getOtherPlayer(player) {\r\n    if (player == WHITE_PLAYER) {\r\n        return BLACK_PLAYER;\r\n    }\r\n    else {\r\n        return WHITE_PLAYER;\r\n    }\r\n}\r\n// Callback de l'événement click sur une cellule\r\nfunction onCellClick(event) {\r\n    // On clique sur une case vide, rien ne se passe\r\n    if (!event.currentTarget.hasChildNodes() && !movingCell.length) {\r\n        return;\r\n    }\r\n    var coords = convertIdToCoords(event.currentTarget.id);\r\n    var piece = grid[coords[1]][coords[0]];\r\n    // Le joueur clique sur une de ses pièces\r\n    // On éteint tout s'il avait déjà sélectionné une pièce\r\n    // On met à jour la pièce sélectionnée, et on allume les cases potentielles de mouvement\r\n    if (getPiecePlayer(piece) == currentPlayerTurn) {\r\n        if (movingCell.length) {\r\n            unlightAllCells();\r\n        }\r\n        movingCell = coords;\r\n        // Convertit le roi en roi unchecked\r\n        // Afin de n'afficher que les déplacements légaux du roi\r\n        if (Math.abs(piece) == Piece.WHITE_KING) {\r\n            piece *= Piece.WHITE_KING_UNCHECKED;\r\n        }\r\n        lightCellsPiece(piece, coords);\r\n    }\r\n    else {\r\n        // Le joueur clique sur une case potentielle de mouvement\r\n        // On déplace la pièce logique et HTML\r\n        // On écrase ce qui se trouve à l'arrivée\r\n        // On essaye de transformer un pion en reine si les conditions sont remplies\r\n        // On change le tour de jeu\r\n        if (event.currentTarget.classList.contains(LIT_CELL_CLASS)) {\r\n            var movingPiece = grid[movingCell[1]][movingCell[0]];\r\n            grid[coords[1]][coords[0]] = movingPiece;\r\n            grid[movingCell[1]][movingCell[0]] = 0;\r\n            removeHTMLPieceFrom(getHTMLPieceAt(coords), coords);\r\n            var HTMLPiece = removeHTMLPieceFrom(getHTMLPieceAt(movingCell), movingCell);\r\n            setHTMLPieceTo(HTMLPiece, coords);\r\n            tryPromotion(movingPiece, coords);\r\n            changeTurn();\r\n        }\r\n        // Qu'il ait cliqué sur un mouvement ou dans le vide\r\n        // On éteint tout et on retire la pièce sélectionnée\r\n        unlightAllCells();\r\n        movingCell = [];\r\n    }\r\n}\r\n// Si un pion arrive au bout du chemin, il se transforme en reine\r\n// On change la pièce logique et HTML\r\nfunction tryPromotion(piece, coords) {\r\n    if (piece == Piece.WHITE_PAWN && coords[1] == WHITE_PROMOTION_ROW) {\r\n        grid[coords[1]][coords[0]] = Piece.WHITE_QUEEN;\r\n        var newQueen = createHTMLPiece(Piece.WHITE_QUEEN);\r\n        removeHTMLPieceFrom(getHTMLPieceAt(coords), coords);\r\n        setHTMLPieceTo(newQueen, coords);\r\n    }\r\n    else if (piece == Piece.BLACK_PAWN && coords[1] == BLACK_PROMOTION_ROW) {\r\n        grid[coords[1]][coords[0]] = Piece.BLACK_QUEEN;\r\n        var newQueen = createHTMLPiece(Piece.BLACK_QUEEN);\r\n        removeHTMLPieceFrom(getHTMLPieceAt(coords), coords);\r\n        setHTMLPieceTo(newQueen, coords);\r\n    }\r\n}\r\n// On retourne uniquement les cases où le pion peut théoriquement prendre une pièce\r\n// Uniquement utilisé dans la vérification d'échec\r\nfunction getCheckPawnMovementCells(coords, player) {\r\n    var result = [];\r\n    var playerDirection = player - getOtherPlayer(player);\r\n    for (var i = -1; i < 2; i += 2) {\r\n        if (getPieceAt([coords[0] + i, coords[1] + playerDirection]) != Piece.VOID) {\r\n            result.push([coords[0] + i, coords[1] + playerDirection]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// On retourne toutes les cases accessibles à un pion blanc sur les coordonnées fournies\r\nfunction getWhitePawnMovementCells(coords) {\r\n    var result = [];\r\n    if (getPieceAt([coords[0], coords[1] - 1]) == Piece.NO_PIECE) {\r\n        result.push([coords[0], coords[1] - 1]);\r\n    }\r\n    if (coords[1] == WHITE_PAWN_START_Y) {\r\n        if (getPieceAt([coords[0], coords[1] - 2]) == Piece.NO_PIECE) {\r\n            result.push([coords[0], coords[1] - 2]);\r\n        }\r\n    }\r\n    for (var i = -1; i < 2; i += 2) {\r\n        var diagonalCoords = [coords[0] + i, coords[1] - 1];\r\n        var pieceAtDiagonalCoords = getPieceAt(diagonalCoords);\r\n        if (getPiecePlayer(pieceAtDiagonalCoords) == BLACK_PLAYER) {\r\n            result.push(diagonalCoords);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// On retourne toutes les cases accessibles à un pion noir sur les coordonnées fournies\r\nfunction getBlackPawnMovementCells(coords) {\r\n    var result = [];\r\n    if (getPieceAt([coords[0], coords[1] + 1]) == Piece.NO_PIECE) {\r\n        result.push([coords[0], coords[1] + 1]);\r\n    }\r\n    if (coords[1] == BLACK_PAWN_START_Y) {\r\n        if (getPieceAt([coords[0], coords[1] + 2]) == Piece.NO_PIECE) {\r\n            result.push([coords[0], coords[1] + 2]);\r\n        }\r\n    }\r\n    for (var i = -1; i < 2; i += 2) {\r\n        var diagonalCoords = [coords[0] + i, coords[1] + 1];\r\n        var pieceAtDiagonalCoords = getPieceAt(diagonalCoords);\r\n        if (getPiecePlayer(pieceAtDiagonalCoords) == WHITE_PLAYER) {\r\n            result.push(diagonalCoords);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// On retourne toutes les cases accessibles à un roi sur les coordonnées fournies\r\n// Nous ne prenons pas en compte l'échec éventuel du roi dans nos déplacements\r\nfunction getKingMovementCells(coords, player) {\r\n    var result = [];\r\n    for (var j = -1; j < 2; j++) {\r\n        for (var i = -1; i < 2; i++) {\r\n            var rangeKing = [coords[0] + j, coords[1] + i];\r\n            var repasDuKing = getPieceAt(rangeKing);\r\n            if (repasDuKing == Piece.NO_PIECE || getPiecePlayer(repasDuKing) == getOtherPlayer(player)) {\r\n                result.push([coords[0] + j, coords[1] + i]);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// On retourne toutes les cases accessibles à un cavalier sur les coordonnées fournies\r\nfunction getKnightMovementCells(coords, player) {\r\n    var result = [];\r\n    for (var j = -2; j < 3; j++) {\r\n        for (var i = -2; i < 3; i++) {\r\n            var somme = Math.pow(j, 2) + Math.pow(i, 2);\r\n            if (somme == 5) {\r\n                var rangeChevalier = [coords[0] + j, coords[1] + i];\r\n                var repasDuChevalier = getPieceAt(rangeChevalier);\r\n                if (repasDuChevalier == Piece.NO_PIECE || getPiecePlayer(repasDuChevalier) == getOtherPlayer(player)) {\r\n                    result.push(rangeChevalier);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// On retourne toutes les cases accessibles à une tour sur les coordonnées fournies\r\nfunction getRookMovementCells(coords, player) {\r\n    var result = [];\r\n    var obstacle = false;\r\n    var obstacle1 = false;\r\n    var i = 1;\r\n    while (obstacle == false && obstacle1 == false) {\r\n        if (getPiecePlayer(getPieceAt([coords[0], coords[1] - i])) == player) {\r\n            obstacle = true;\r\n        }\r\n        if (getPiecePlayer(getPieceAt([coords[0] - i, coords[1]]) == player)) {\r\n            obstacle1 = true;\r\n        }\r\n        if (getPiecePlayer(getPieceAt([coords[0], coords[1] - i]) == getOtherPlayer(player))) {\r\n            result.push([coords[0], coords[1] - i]);\r\n            obstacle = true;\r\n        }\r\n        if (getPiecePlayer(getPieceAt([coords[0] - i, coords[1]]) == getOtherPlayer(player))) {\r\n            result.push([coords[0] - i, coords[1]]);\r\n            obstacle1 = true;\r\n        }\r\n        if (obstacle == false) {\r\n            var rangeTour = [coords[0], coords[1] - i];\r\n            result.push(rangeTour);\r\n        }\r\n        if (obstacle1 == false) {\r\n            var rangeTourlateral = [coords[0] - i, coords[1]];\r\n            result.push(rangeTourlateral);\r\n        }\r\n        i++;\r\n    }\r\n    return result;\r\n}\r\n// On retourne toutes les cases accessibles à un fou sur les coordonnées fournies\r\nfunction getBishopMovementCells(coords, player) {\r\n    var result = [];\r\n    return result;\r\n}\r\n// On retourne toutes les cases accessibles à une reine sur les coordonnées fournies\r\nfunction getQueenMovementCells(coords, player) {\r\n    var result = [];\r\n    return result;\r\n}\r\n// On retourne toutes les cases accessibles à un roi sur les coordonnées fournies\r\n// Nous filtrons ici les cases où le roi serait en échec\r\nfunction getUncheckedKingMovementCells(coords, player, checkedCells) {\r\n    var result = [];\r\n    result = getKingMovementCells(coords, player);\r\n    return result;\r\n}\r\n// Génération de grille et lancement d'une partie\r\ngenerateGrid(grid);\r\ngenerateHTMLGrid(htmlGrid);\r\ngenerateDefaultBoardState(grid);\r\n"]}